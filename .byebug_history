c
liunian_age(user)
age = liunian_age(user)
result = age.zip(xi_yuan, min_guo).map { |arr1, arr2, arr3| [arr1[0] + '/' + arr2[0] + '/' + arr3[0]] }
result = age.zip(xi_yuan, min_guo).map { |arr1, arr2, arr3| [arr1[0] + '/' + arr2[0] + '/' + arr3[0] }
result = age.zip(xi_yuan, min_guo).map { |arr1, arr2, arr3| [arr1[0] + '/' + arr2[0] + '/' + arr3[0], arr1[1] + '/' + arr2[1] + '/' + arr3[1]] }
show_liunian_min_guo(user)
show_liunian_xi_yuan(user)
show_liunian_age(user)
c
user_dayun_zhi.index(target[0])
ma_arr[2]
 target = hash[ma_arr[2]].chars - [user_zhi[ma_arr[0]], user_zhi[ma_arr[1]]]
c
target = hash[ma_arr[2]].chars - [user_zhi[ma_arr[0]], user_zhi[ma_arr[1]]]
ma_arr
mached_2_user_zhi_index
c
user_dayun_zhi
user_dayun_zhi.index(target)
ma_arr
target = hash[ma_arr[2]].chars - [user_zhi[ma_arr[0]], user_zhi[ma_arr[1]]]
c
user_zhi.index(ma_arr[0])
ma_arr
[user_zhi.index(ma_arr[0]), user_zhi.index(ma_arr[1])]
hash[ma_arr[2]].chars
ma_arr
mached_2_user_zhi_index
c
hash[2].chars
hash[2]
mached3 - hash[2]
mached3 = mached2 + [u_d_z]
 mached2 + [u_d_z]
u_d_z
mached2
c
User.first.translate_birthday[:year]
User.first.translate_birthday
liunian_year
liunian_year_arr.each { |year| liunian_year << get_chinese_year(year) }
 liunian_year = []
liunian_year_arr = (liunian_first_year..liunian_first_year+59).to_a
liunian_first_year = liunian_first_age + 1911
q
all_posible
pos
q
n
c
user_zhi[arr2[0].to_i]
user_zhi[arr2[0]]
user_zhi
user_zhi.index(arr2[0])
arr2
q
c
dayun_zhi_sanhui_position
user_zhi =["亥", "辰", "未", "子", "申"]
    user_dayun_zhi = ["卯", "子", "午", "寅"] 
    dayun_zhi_sanhui_position = []
    User::ZHI_SANHUI.each_with_index do |hui_zhi, hui_index|
      arr = hui_zhi.chars.permutation.map(&:join).map do |zhi|
        arr2 = zhi.chars
        dayun_zhi_sanhui_position << [user_zhi.index(arr2[0]), user_zhi.index(arr2[1]),user_dayun_zhi.index(arr2[1]), User::ZHI_SANHUI_WUXING[hui_index]]
      end
    end
    dayun_zhi_sanhui_position = []
[1,2,3].select{|aa| aa==3}
dayun_zhi_sanhui_position.select { |sub_arr| sub_arr.compact.size == 3 }.select { |sub_arr| sub_arr.compact.size == 3 }
dayun_zhi_sanhui_position.select { |sub_arr| sub_arr.compact.size == 3 }..select { |sub_arr| sub_arr.compact.size == 3 }
dayun_zhi_sanhui_position.select { |sub_arr| sub_arr.compact.size == 3 }
dayun_zhi_sanhui_position.count
user_zhi =["亥", "辰", "未", "子", "申"]
    user_dayun_zhi = ["卯", "子", "午", "寅"] 
    dayun_zhi_sanhui_position = []
    User::ZHI_SANHUI.each_with_index do |hui_zhi, hui_index|
      arr = hui_zhi.chars.permutation.map(&:join).map do |zhi|
        arr2 = zhi.chars
        dayun_zhi_sanhui_position << [user_zhi.index(arr2[0]), user_zhi.index(arr2[1]),user_dayun_zhi.index(arr2[1]), User::ZHI_SANHUI_WUXING[hui_index]]
      end
    end
dayun_zhi_sanhui_position
dayun_zhi_sanhui_position = dayun_zhi_sanhui_position.select { |sub_arr| sub_arr.compact.size == 3 }
dayun_zhi_sanhui_position
user_zhi =["亥", "辰", "未", "子", "申"]
    user_dayun_zhi = ["卯", "子", "午", "寅"] 
    dayun_zhi_sanhui_position = []
    User::ZHI_SANHUI.each_with_index do |hui_zhi, hui_index|
      arr = hui_zhi.chars.permutation.map(&:join).map do |zhi|
        arr2 = zhi.chars
        dayun_zhi_sanhui_position << [user_zhi.index(arr2[0]), user_zhi.index(arr2[1]),user_dayun_zhi.index(arr2[1]), User::ZHI_SANHUI_WUXING[hui_index]]
      end
    end
hui_zhi.chars
hui_zhi
arr
arr[0]
arr
user_zhi
dayun_zhi_sanhui_position
dayun_zhi_sanhui_position << [user_zhi.index(arr[0]), user_zhi.index(arr[1]),user_dayun_zhi.index(arr[1]), User::ZHI_SANHUI_WUXING[hui_index]]
hui_zhi.chars.permutation.map(&:join)
hui_zhi
c
eval b
a
eval b
b
a
c = ['甲乙己','乙丁辛']
b=['戊','己','庚','辛']
b = ['戊', '己', '庚', '辛']
b = ['戊','己','庚','辛']
a =['甲','乙','丙','丁']
user_dayun_gan
user_gan
arr
GAN_XIANGHE.each do |x| 
      z = x.chars
      arr << [user_gan.index(z[0]), user_dayun_gan.index(z[1])] 
    end
GAN_XIANGHE.each do |x| 
      z = x.char 
      arr << [user_gan.index(z[0]), user_dayun_gan.index(z[1])] 
    end
arr
GAN_XIANGHE.each do |x| z = x.char; arr << [user_gan.index(z[0]), user_dayun_gan.index(z[1])]; end
GAN_XIANGHE.each { |x| z = x.char; arr << [user_gan.index(z[0]), user_dayun_gan.index(z[1])] }
GAN_XIANGHE
arr = []
user_dayun_gan
    user_gan = [year_gan, month_gan, day_gan, time_gan]
c
position
all_position.each {|ppp| p ppp}
all_position[0]
all_position.class
all_position
all_position.each {|p| puts p}
all_position.each {|p| pp p}
all_position
index
position
c
position
zhi.split('').sort
zhi
c
zhi.split('').sort
position.sort
position
zhi
q
get_chinese_year(2001)
q
helper.get_chinese_year(2001)
get_chinese_year(2001)
exit
changzhi_array_remove_first.map { |gan| translate_shishen('丁', gan) }
changzhi_array_remove_first.each { |gan| translate_shishen('丁', gan) }
changzhi_array_remove_first = changzhi_array.drop(1)
changzhi_array = changzhi_str.split('')
changzhi_str = changzhi(zhi)
zhi
changzhi_array
changzhi_array.split('')
changzhi_array.split(',')
changzhi_array
changzhi_array.split(',').shift
c
translate_shishen('甲','乙')
c
User::XIANGKE[another_wuxing.to_sym] == myself_wuxing
another_wuxing
myself_wuxing
relation
c
User::XIANGSHENG[myself_wuxing.to_sym]
User::XIANGSHENG[another_wuxing.to_sym]
User::XIANGSHENG[another_wuxing.to_sym] == User::XIANGSHENG[myself_wuxing.to_sym]
User::XIANGSHENG[myself_wuxing.to_sym] == User::XIANGSHENG[another_wuxing.to_sym]
User::XIANGSHENG[myself_wuxing.to_sym] == User::XIANGSHENG[another_wuxing.
User::XIANGKE[another_wuxing.to_sym] == User::XIANGKE[myself_wuxing.to_sym]
User::XIANGKE[myself_wuxing.to_sym] == User::XIANGKE[another_wuxing.to_sym]
another_wuxing
myself_wuxing
relation
another_yinyang
myself_yinyang
shishen = { 
      '剋我': ['正官', '七殺'],
      '我剋': ['正財', '偏財'],
      '我生': ['食神', '傷官'],
      '生我': ['正印', '偏印'],
      '同我': ['比肩', '劫財'],
    }
c
n
c
shishen = { 
      '剋我': ['正官', '七殺'],
      '我剋': ['正財', '偏財'],
      '我生': ['食神', '傷官'],
      '生我': ['正印', '偏印'],
      '同我': ['比肩', '劫財'],
    }
relation
relation = if myself_wuxing ==  another_wuxing
                 '同我'
               elsif User::XIANGKE[myself_wuxing.to_sym] == User::XIANGKE[another_wuxing.to_sym]
                 '剋我'
               elsif User::XIANGKE[another_wuxing.to_sym] == User::XIANGKE[myself_wuxing.to_sym]
                 '我剋'
               elsif User::XIANGSHENG[myself_wuxing.to_sym] == User::XIANGSHENG[another_wuxing.to_sym]
                 '我生'
               elsif User::XIANGSHENG[another_wuxing.to_sym] == User::XIANGSHENG[myself_wuxing.to_sym]
                 '生我'
               end
relation = if myself_wuxing ==  another_wuxing
                 '同我'
               elsif User::XIANGKE[myself_wuxing.to_sym] == User::XIANGKE[another_wuxing.to_sym]
                 '剋我'
               elsif User::XIANGKE[another_wuxing.to_sym] == User::XIANGKE[myself_wuxing.to_sym]
                 '我剋'
               elsif User::XIANGSHENG[myself_wuxing.to_sym] == User::XIANGSHENG[another_wuxing.to_sym]
                 '我生'
               elsif User::XIANGSHENG[another_wuxing.to_sym] == User::XIANGSHENG[myself_wuxing.to_sym]
                 '生我'
               endrelation = if myself_wuxing ==  another_wuxing
                 '同我'
               elsif User::XIANGKE[myself_wuxing.to_sym] == User::XIANGKE[another_wuxing.to_sym]
                 '剋我'
               elsif User::XIANGKE[another_wuxing.to_sym] == User::XIANGKE[myself_wuxing.to_sym]
                 '我剋'
               elsif User::XIANGSHENG[myself_wuxing.to_sym] == User::XIANGSHENG[another_wuxing.to_sym]
                 '我生'
               elsif User::XIANGSHENG[another_wuxing.to_sym] == User::XIANGSHENG[myself_wuxing.to_sym]
                 '生我'
               end
c
another_wuxing
User::XIANGKE[another_wuxing.to_sym]
User::XIANGKE[myself_wuxing.to_sym]
User::XIANGKE[myself_wuxing.to_sym] == User::XIANGKE[another_wuxing.to_sym]
relation
n
User::XIANGKE[another_wuxing.to_sym]
myself_wuxing.to_sym
User::XIANGKE[myself_wuxing.to_sym]
c
datetime_str.year
datetime_str = DateTime.parse(birthday.to_s)
birthday
c
